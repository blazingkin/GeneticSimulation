:main

	genes = ["t", "T"]
	initial_pop = []
	pop_size = 50
	number_of_gens = 50
	for i = 0; i < pop_size; i++
		initial_pop.add!(Individual(genes.sample!(), genes.sample!()))
	end
	
	pop = initial_pop.copy()
	print("Initial population")	
	count_pop(pop, "T")
	print()

	for i = 0; i < number_of_gens; i++
		new_pop = []
		for j = 0; j < pop.length!(); j++
			new_pop.add!(pop[j].breed(pop.sample()))
		end
		if i % 10 == 0
			print("Finished "+i+"th generation")
		end
		pop = new_pop
	end

	print("After " + number_of_gens + " generations")	
	count_pop(pop, "T")
	
end

:count_pop(pop, dominant_genotype)
	homo_dom = 0
	homo_rec = 0
	hetero = 0
	
	for i = 0; i < pop.length(); i++
		if (pop[i].maternal == pop[i].paternal)
			if pop[i].maternal == dominant_genotype
				homo_dom++
			else
				homo_rec++
			end
		else
			hetero++
		end
	end
	
	print("Homozygous dominiant: "+{text.tab}+homo_dom)
	print("Heterozygous: "+{text.tab}+{text.tab}+hetero)
	print("Homozygous recessive: "+{text.tab}+homo_rec)
end


constructor Individual(maternal, paternal)

	:random_gene
		if random(2) == 0
			maternal
		else
			paternal
		end
	end

	:breed(other)
		Individual(random_gene(), other.random_gene())
	end
	
	:show
		"(" + maternal + "/" + paternal + ")"
	end

end